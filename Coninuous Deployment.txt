*** Step 1 — Creating the GitLab Repository
-------------------------------------------
index.html
<html>
<body>
<h1>My Personal Website</h1>
</body>
</html>

Dockerfile
FROM nginx:1.18
COPY index.html /usr/share/nginx/html

*** Step 2 — Registering a GitLab Runner
----------------------------------------
gitlab-runner register -n --url https://your_gitlab.com --registration-token project_token --executor docker --description "Deployment Runner" --docker-image "docker:stable" --tag-list deployment --docker-privileged


*** Step 3 — Creating a Deployment User
---------------------------------------
sudo adduser deployer
sudo usermod -aG docker deployer

*** Step 4 — Setting Up an SSH Key
----------------------------------
su deployer
ssh-keygen -b 4096
* To authorize the SSH key for the deployer user, you need to append the public key to the authorized_keys file:
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

*** Step 5 — Storing the Private Key in a GitLab CI/CD Variable
---------------------------------------------------------------
cat ~/.ssh/id_rsa
* Copy the output to your clipboard. Make sure to add a linebreak after -----END RSA PRIVATE KEY-----:
* Now navigate to Settings > CI / CD > Variables in your GitLab project and click Add Variable. Fill out the form as follows:

    Key: ID_RSA
    Value: Paste your SSH private key from your clipboard (including a line break at the end).
    Type: File
    Environment Scope: All (default)
    Protect variable: Checked
    Mask variable: Unchecked

* A file containing the private key will be created on the runner for each CI/CD job and its path will be stored in the $ID_RSA environment variable.

* Create another variable with your server IP. Click Add Variable and fill out the form as follows:

    Key: SERVER_IP
    Value: your_server_IP
    Type: Variable
    Environment scope: All (default)
    Protect variable: Checked
    Mask variable: Checked

* Finally, create a variable with the login user. Click Add Variable and fill out the form as follows:

    Key: SERVER_USER
    Value: deployer
    Type: Variable
    Environment scope: All (default)
    Protect variable: Checked
    Mask variable: Checked

*** Step 6 — Configuring the .gitlab-ci.yml File
------------------------------------------------
.gitlab-ci.yml
stages:
  - publish
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

publish:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f my-app || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 80:80 --name my-app $TAG_COMMIT"
  environment:
    name: production
    url: http://your_server_IP
  only:
    - master